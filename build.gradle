plugins {
    id 'java'
    id 'war'
    id 'org.akhikhl.gretty' version '1.4.2'
    id "net.saliman.cobertura" version "2.5.0"
    id "org.sonarqube" version "2.5"
}

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
    }
}

sourceCompatibility = 1.8

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.7.6.201602180812"
//    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

test {
    filter {
        includeTestsMatching "org.gradle.demo.HelloServletTest"
    }
    testLogging{
        events 'started', 'passed'
    }
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

task integTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    maxHeapSize = '1024m'

    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath

    binResultsDir = file("$buildDir/integration-test-results/binary/integTest")
    testLogging{
        events 'started', 'passed'
    }
    reports {
        html.destination = "$buildDir/reports/integration-test"
        junitXml.destination = "$buildDir/integration-test-results"
    }
}

check.dependsOn integTest

repositories {
    jcenter()
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.19'
    testRuntime "org.slf4j:slf4j-log4j12:1.7.5"
    testCompile 'io.github.bonigarcia:webdrivermanager:1.6.1'
    testCompile 'org.seleniumhq.selenium:selenium-java:3.3.1'

    integTestCompile sourceSets.main.output
    integTestCompile sourceSets.test.output

    integTestCompile configurations.compile
    integTestCompile configurations.testCompile

    integTestRuntime configurations.runtime
    integTestRuntime configurations.testRuntime
}

cobertura.coverageFormats = ['html', 'xml']

gretty {
    httpPort = 8088
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Example of SonarQube Scanner for Gradle Usage'
    }
}






